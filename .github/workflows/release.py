import requests, argparse, json, os, re

parser = argparse.ArgumentParser(description='Parameters.')
parser.add_argument('--path', metavar='path', type=str, nargs='+',
                    help='path where to search for files')
parser.add_argument('--files', metavar='files', type=str, nargs='+',
                    help='name of files to upload')    
parser.add_argument('--version', metavar='version', type=str, nargs='+',
                    help='version to use for tags (major minor)')   
args = parser.parse_args()
d = vars(args)

r = os.environ['GITHUB_REPOSITORY']
t = os.environ['GITHUB_TOKEN']
p = d['path'][0]
fi = d['files']

#read for major and minor addon bl_info data
ma = re.search('([0-9]+)\.([0-9]+)', d['version'][0])
v = (int(ma.group(1)), int(ma.group(2)))
print(v)

owner = r.split("/")[0]
name = r.split("/")[1]

latest = requests.get(
    headers={'Accept': 'application/vnd.github.v3+json',
             'Authorization': 'token {token}'.format(token=t),
             'User-Agent': name },
    url='https://api.github.com/repos/{owner}/{name}/releases/latest'.format(owner=owner, name=name),
)

new_tag = "v0.0.1"

#expected tag format is "v2.x.x"... major minor patch
if latest is not None and latest.json() is not None:
    tag = "v" + str(v[0]) + "." + str(v[1]) + "." + str(0)
    if "tag_name" in latest.json():
        tag = latest.json()["tag_name"]
    m = re.search('v([0-9]+)\.([0-9]+)\.([0-9]+)', tag)
    if m is not None:
        major = int(m.group(1))
        minor = int(m.group(2))
        patch = int(m.group(3))

        #take new major or minor versions into account and reset patch number for tag
        if v[0] != major or v[1] != minor:
            patch = 0
            major = v[0]
            minor = v[1]
        else:
            patch += 1
        new_tag = "v" + str(major) + "." + str(minor) + "." + str(patch)

j = {"tag_name":new_tag, # can be manually edited on publishing this draft !
    "target_commitish":"main",
    "name": name,
    "body":"Autogenerated release package",
    "draft":True,
    "prerelease":False,
    "generate_release_notes":False},

js = json.dumps(j[0])

r = requests.post(
    headers={'Accept': 'application/vnd.github.v3+json',
             'Authorization': 'token {token}'.format(token=t),
             'User-Agent': name },
    url='https://api.github.com/repos/{owner}/{name}/releases'.format(owner=owner, name=name),
    data=js,
)

#print(r.json())

if "upload_url" in r.json():
    url = r.json()["upload_url"]
    u = url.split("{")[0]

    for f in fi:
        pr = os.path.realpath(p)
        pa = os.path.join(pr, f)
        with open(pa, 'rb') as data:
            r = requests.post(
                headers={'Content-Type': 'application/zip',
                        'Authorization': 'token {token}'.format(token=t)},
                url=u+'?name={name}'.format(name=f),
                data=data.read()
            )
